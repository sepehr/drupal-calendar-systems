<?php

/**
 * Implements hook_help().
 */
function calendar_systems_help($path, $arg) {
  switch ($path) {
    case 'admin/config/calendar-systems':
      return '<p>' . t('Using the following form you can assign a different calendar system to each language and also select the default calendar system.') . '</p>';
  }
}

/**
 * Implements hook_perm().
 */
function calendar_systems_permission() {
  return array(
    'administer calendar_systems' => array(
      'title' => t('Administer calendar systems'),
      'description' => t('Administer calendar systems configurations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function calendar_systems_menu() {
  $items = array();

  // Main configuration page:
  $items['admin/config/regional/calendar-systems'] = array(
    'title' => 'Calendar systems',
    'description' => 'Administer calendar systems profiles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_systems_profile_overview'),
    'access arguments' => array('administer calendar_systems'),
    'file' => 'calendar_systems.admin.inc',
  );
  // Configuration profile:
  $items['admin/config/regional/calendar-systems/profile'] = array(
    'title' => 'Calendar systems profiles',
    'description' => 'Assign calendar systems.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Profile removal:
  $items['admin/config/regional/calendar-systems/profile/%/delete'] = array(
    'title' => 'Remove',
    'description' => 'Calendar systems profile removal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_systems_profile_delete_confirm', 5),
    'access arguments' => array('administer calendar_systems'),
    'file' => 'calendar_systems.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function calendar_systems_theme() {
  return array(
    'calendar_systems_profile_overview' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Internal helper to load calendar system's required dependencies.
 */
function _calendar_systems_load() {
  // This static variable will not need to be reset during
  // the page request, so we're not using drupal_static() here.
  static $loaded = FALSE;

  if (!$loaded) {
    if (!module_exists('cml')) {
      module_load_include('class.inc.php', 'calendar_systems', 'calendar/lib/classesCore');
    }
    module_load_include('class.inc.php', 'calendar_systems', 'calendar/calendar');
    $loaded = TRUE;
  }
}

/**
 * Internal helper which defines all available calendars manually.
 *
 * @return
 *   An array defined calendars.
 *
 * @todo
 *   Define a pluggable API, so other modules can hook the hell in.
 */
function _calendar_systems_plugins() {
  $result = array(
    'default' => array(
      'title' => t('Default'),
      'installed' => TRUE,
      'installed version' => 2,
    ),
    'iranian' => array(
      'title' => t('Iranian'),
      'installed' => TRUE,
      'installed version' => 2,
    ),
    'arabic'  => array(
      'title' => t('Arabic'),
      'installed' => TRUE,
      'installed version' => 2,
    ),
  );

  return $result;
}

/**
 * Internal helper to get all active languages.
 *
 * @return
 *   An array of active languages.
 */
function _calendar_systems_langauges() {
  // Default:
  $languages['default'] = array(
    'name' => 'Default'
  );

  // Check if there's any additional locale available:
  $locales = function_exists('locale_language_list') ?
    locale_language_list('name', TRUE) : NULL;

  // If found, append 'em:
  if (!is_null($locales)) {
    foreach ($locales as $name => $title) {
      $languages[$name] = array(
        'name' => $title,
      );
    }
  }

  return $languages;
}

/**
 * Internal helper to return site's current language.
 *
 * @return
 *   Current language.
 */
function _calendar_systems_languages_active() {
    global $language;
    // Better?
    return ($language && $language->language) ? $language->language : 'default';
}

/**
 * Internal static cache helper to get all available profiles.
 *
 * @return
 *   An array of available profiles.
 */
function _calendar_systems_profiles() {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache)) {
    $cache = array();
    $profiles = db_query('SELECT language, calendar_system, settings FROM {calendar_systems}');
    // Build an array of profiles keyed by the identifiers:
    foreach ($profiles as $profile) {
      $profile->settings = unserialize($profile->settings);
      $cache[$profile->language] = $profile;
    }
  }

  return $profiles;
}

/**
 *  Gets an instance of the calendar object for
 *  the selected calendar system acording to the settings
 *
 */
function calendar_systems_get_calendar_instance() {
  calendar_systems_load_dependenies();
  $profiles=calendar_systems_profile_load_all();
  $lang=calendar_systems_get_active_lang();

  if (isset($profiles[$lang])) {
    $calendar_system=$profiles[$lang]->calendar_system;
  }
  else {
    if ($profiles['default']) {
		$calendar_system=$profiles['default']->calendar_system;
	}
  }
  if (empty($calendar_system))  {
    $calendar_system='default';
  }

  if ($calendar_system=='iranian') {
    $calendar=cmfcCalendar::factory('v1', array(
      'name' => 'iranian'
    ));
  }
  elseif ($calendar_system=='arabic') {
    $calendar=cmfcCalendar::factory('v1', array(
      'name' => 'arabic'
    ));
  }
  elseif ($calendar_system=='default') {
    $calendar=cmfcCalendar::factory('v1', array(
      'name' => 'gregorian'
    ));
  }

  return $calendar;
}



/**
 * Implements hook format_date
 *
 * Format a date with the given configured format or a custom format string.
 *
 * Drupal allows administrators to select formatting strings for 'small',
 * 'medium' and 'large' date formats. This function can handle these formats,
 * as well as any custom format.
 *
 * @param $timestamp
 *   The exact date to format, as a UNIX timestamp.
 * @param $type
 *   The format to use. Can be "small", "medium" or "large" for the preconfigured
 *   date formats. If "custom" is specified, then $format is required as well.
 * @param $format
 *   A PHP date format string as required by date(). A backslash should be used
 *   before a character to avoid interpreting the character as part of a date
 *   format.
 * @param $timezone
 *   Time zone offset in seconds; if omitted, the user's time zone is used.
 * @param $langcode
 *   Optional language code to translate to a language other than what is used
 *   to display the page.
 * @return
 *   A translated date string in the requested format.
 */
function calendar_systems_format_date($timestamp, $type = 'medium', $format = '', $timezone = NULL, $langcode = NULL) {
  $calendar=calendar_systems_get_calendar_instance();

  if (!isset($timezone)) {
    global $user;
    if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
      $timezone = $user->timezone;
    }
    else {
      $timezone = variable_get('date_default_timezone', 0);
    }
  }

  $timestamp += $timezone;

  switch ($type) {
    case 'small':
      $format = variable_get('date_format_short', 'm/d/Y - H:i');
      break;
    case 'large':
      $format = variable_get('date_format_long', 'l, F j, Y - H:i');
      break;
    case 'custom':
      // No change to format.
      break;
    case 'medium':
    default:
      $format = variable_get('date_format_medium', 'D, m/d/Y - H:i');
  }

  $max = strlen($format);
  $date = '';
  for ($i = 0; $i < $max; $i++) {
    $c = $format[$i];
    if (strpos('AaDlM', $c) !== FALSE) {
      $date .= t($calendar->timestampToStr($c, $timestamp), array(), $langcode);
    }
    elseif ($c == 'F') {
      // Special treatment for long month names: May is both an abbreviation
      // and a full month name in English, but other languages have
      // different abbreviations.
      $date .= trim(t('!long-month-name '. $calendar->timestampToStr($c, $timestamp), array('!long-month-name' => ''), $langcode));
    }
    elseif (strpos('BdgGhHiIjLmnsStTUwWYyz', $c) !== FALSE) {
      $date .= $calendar->timestampToStr($c, $timestamp);
    }
    elseif ($c == 'r') {
      $date .= calendar_systems_format_date($timestamp - $timezone, 'custom', 'D, d M Y H:i:s O', $timezone, $langcode);
    }
    elseif ($c == 'O') {
      $date .= sprintf('%s%02d%02d', ($timezone < 0 ? '-' : '+'), abs($timezone / 3600), abs($timezone % 3600) / 60);
    }
    elseif ($c == 'Z') {
      $date .= $timezone;
    }
    elseif ($c == '\\') {
      $date .= $format[++$i];
    }
    else {
      $date .= $c;
    }
  }

  return $date;
}

/**
 * Validates date fields considerign the acitve calendar system
 */
function calendar_systems_date_validate($element, &$form_state) {
   if (!empty($element['#value'])) {
       // form_error($element, t('This field is required.'));
       $v=$element['#value'];
       $calendar=calendar_systems_get_calendar_instance();
       $a=preg_replace('/([0-9]+\-[0-9]+\-[0-9]+) (.*)/si', '$1', $v);
       $b=preg_replace('/([0-9]+\-[0-9]+\-[0-9]+) (.*)/si', '$2', $v);
       $v=$calendar->strToTimestamp("$a 10:10:10");
       $v=date("Y-m-d $b", $v);
       form_set_value($element, $v, &$form_state);
   }
}

/**
 * Implements hook_form_alter().
 * Optionally record all form submissions, for later use in
 * building distributions
 */
function calendar_systems_form_alter(&$form, $form_state, $form_id) {

    if (isset($form['author']['date'])) {
        $form['author']['date']['#element_validate']=array('calendar_systems_date_validate');
    }

    if (isset($form['admin']['date'])) {
        $form['admin']['date']['#element_validate']=array('calendar_systems_date_validate');
    }
}
